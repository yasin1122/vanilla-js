| #   | Problem                                            | Why It's Ranked Here                                            | Link                                                                                                                                                         |
| --- | -------------------------------------------------- | --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| 1   | **Two Sum**                                        | Easiest must-know hashmap pattern                               | [https://leetcode.com/problems/two-sum](https://leetcode.com/problems/two-sum)                                                                               |
| 2   | **Valid Parentheses**                              | Easy stack-based parsing — good warm-up for maintainable code   | [https://leetcode.com/problems/valid-parentheses](https://leetcode.com/problems/valid-parentheses)                                                           |
| 3   | **Reverse Linked List**                            | Core LL pointer manipulation — DS round favorite                | [https://leetcode.com/problems/reverse-linked-list](https://leetcode.com/problems/reverse-linked-list)                                                       |
| 4   | **Longest Substring Without Repeating Characters** | Real Amazon favorite — sliding window                           | [https://leetcode.com/problems/longest-substring-without-repeating-characters](https://leetcode.com/problems/longest-substring-without-repeating-characters) |
| 5   | **Merge Intervals**                                | Sorting + interval logic — common problem solving test          | [https://leetcode.com/problems/merge-intervals](https://leetcode.com/problems/merge-intervals)                                                               |
| 6   | **LRU Cache**                                      | Simulates class design, uses LinkedHashMap concepts             | [https://leetcode.com/problems/lru-cache](https://leetcode.com/problems/lru-cache)                                                                           |
| 7   | **Subarray Sum Equals K**                          | Prefix sum + hashmap — requires reasoning to avoid brute force  | [https://leetcode.com/problems/subarray-sum-equals-k](https://leetcode.com/problems/subarray-sum-equals-k)                                                   |
| 8   | **3Sum**                                           | Forces two-pointer + de-duplication reasoning                   | [https://leetcode.com/problems/3sum](https://leetcode.com/problems/3sum)                                                                                     |
| 9   | **Logger Rate Limiter**                            | Simulates real system + class design — logical code round       | [https://leetcode.com/problems/logger-rate-limiter](https://leetcode.com/problems/logger-rate-limiter)                                                       |
| 10  | **Word Break**                                     | Combines recursion + memo + hashmap — common follow-up patterns | [https://leetcode.com/problems/word-break](https://leetcode.com/problems/word-break)                                                                         |

| #   | Problem                                  | Why It Matters                                                    | Link                                                                                                                                     |
| --- | ---------------------------------------- | ----------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| 11  | **Top K Frequent Elements**              | Common "heap or bucket sort" question, easy to grasp              | [https://leetcode.com/problems/top-k-frequent-elements](https://leetcode.com/problems/top-k-frequent-elements)                           |
| 12  | **Binary Tree Level Order Traversal**    | Standard BFS in trees — classic Amazon question                   | [https://leetcode.com/problems/binary-tree-level-order-traversal](https://leetcode.com/problems/binary-tree-level-order-traversal)       |
| 13  | **Insert Delete GetRandom O(1)**         | Clean class design using HashMap + Array                          | [https://leetcode.com/problems/insert-delete-getrandom-o1](https://leetcode.com/problems/insert-delete-getrandom-o1)                     |
| 14  | **Design Hit Counter**                   | In-memory system simulation — good “logical maintainable” example | [https://leetcode.com/problems/design-hit-counter](https://leetcode.com/problems/design-hit-counter)                                     |
| 15  | **Group Anagrams**                       | Simple hashmap logic, helps with reasoning + string hashing       | [https://leetcode.com/problems/group-anagrams](https://leetcode.com/problems/group-anagrams)                                             |
| 16  | **Climbing Stairs**                      | Gentle intro to recursion + DP memoization                        | [https://leetcode.com/problems/climbing-stairs](https://leetcode.com/problems/climbing-stairs)                                           |
| 17  | **Find Minimum in Rotated Sorted Array** | Clean binary search on edge-case data                             | [https://leetcode.com/problems/find-minimum-in-rotated-sorted-array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array) |
| 18  | **Kth Largest Element in an Array**      | Intro to Min Heap (very likely to come up)                        | [https://leetcode.com/problems/kth-largest-element-in-an-array](https://leetcode.com/problems/kth-largest-element-in-an-array)           |
| 19  | **Minimum Window Substring**             | More advanced sliding window — requires edge case care            | [https://leetcode.com/problems/minimum-window-substring](https://leetcode.com/problems/minimum-window-substring)                         |
| 20  | **Permutations**                         | Classic backtracking — many Amazon follow-ups use this pattern    | [https://leetcode.com/problems/permutations](https://leetcode.com/problems/permutations)                                                 |
